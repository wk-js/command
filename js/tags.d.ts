import * as Types from "./types";
export declare const TAGS: string[];
export declare function validate(value: any, message: string, type?: "string" | "number" | "boolean" | "object" | "array"): void;
export declare function get_key(data: Types.TagValue | Types.TagCondition | Types.TagSequence): keyof Types.Tags;
export declare function has_key(data: any, key: string): any;
export declare function Any(data: Types.TagValue | Types.TagCondition | Types.TagSequence): Types.Scalar | Types.Scalar[];
export declare function Scalar(data: Types.TagValue | Types.TagCondition): Types.Scalar;
export declare function Sequence(data: Types.TagSequence): Types.Scalar[];
export declare function Split({ Split: [delimiter, value] }: Types.Tags['Split']): Types.Scalar[];
export declare function Value(data: Types.TagValue): string | boolean;
export declare function If({ If: [condition, v0, v1] }: Types.Tags['If']): Types.Scalar;
export declare function Ref({ Ref }: Types.Tags['Ref']): Types.Scalar;
export declare function Select({ Select: [index, values] }: Types.Tags['Select']): Types.Scalar;
export declare function Sub({ Sub }: Types.Tags['Sub']): Types.Scalar;
export declare function Condition(data: Types.TagCondition): Types.Scalar;
export declare function Equals({ Equals: [v0, v1] }: Types.Tags['Equals']): boolean;
export declare function DeepEquals({ DeepEquals: [v0, v1] }: Types.Tags['DeepEquals']): boolean;
export declare function And({ And }: Types.Tags['And']): boolean;
export declare function Or({ Or }: Types.Tags['Or']): boolean;
export declare function Not({ Not }: Types.Tags['Not']): boolean;
export declare function Empty({ Empty }: Types.Tags['Empty']): boolean;
